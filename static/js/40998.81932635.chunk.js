"use strict";(self.webpackChunkhelloworld=self.webpackChunkhelloworld||[]).push([[40998],{40998:(e,t,r)=>{r.r(t),r.d(t,{submitTraceJob:()=>c,trace:()=>s});var a=r(3825),n=r(54994),o=r(57778);async function s(e,t,r){const s=(0,n.Dl)(e),c=t.toJSON();c.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(c.resultTypes=JSON.stringify(t.resultTypes));const l=(0,n.jV)(s.query,{query:(0,n.lF)({...c,f:"json"}),...r}),i="".concat(s.path,"/trace");return(0,a.A)(i,l).then((e=>function(e,t){const{data:r}=e,a=o.A.fromJSON(r.traceResults);return a.aggregatedGeometry&&t&&(a.aggregatedGeometry.line&&(a.aggregatedGeometry.line.spatialReference=t.clone()),a.aggregatedGeometry.multipoint&&(a.aggregatedGeometry.multipoint.spatialReference=t.clone()),a.aggregatedGeometry.polygon&&(a.aggregatedGeometry.polygon.spatialReference=t.clone())),a}(e,t.outSpatialReference)))}async function c(e,t,r){const o=(0,n.Dl)(e),s=t.toJSON();s.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(s.resultTypes=JSON.stringify(t.resultTypes));const c=(0,n.jV)(o.query,{query:(0,n.lF)({...s,async:!0,f:"json"}),...r}),l="".concat(o.path,"/trace"),{data:i}=await(0,a.A)(l,c);return i.statusUrl}}}]);
//# sourceMappingURL=40998.81932635.chunk.js.map