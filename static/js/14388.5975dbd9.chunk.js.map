{"version":3,"file":"static/js/14388.5975dbd9.chunk.js","mappings":";2VAAO,MAAMA,EACF,UADEA,EAEH,SAFGA,EAGH,SAGGC,EAEA,YAFAA,EAGF,UAHEA,EAIO,oBAJPA,EAKE,cALFA,EAMH,SANGA,EAOM,mBAPNA,EAQF,UAREA,EASL,OATKA,EAUF,UAVEA,EAWC,cAXDA,EAaJ,QAbIA,EAcH,SAdGA,EAeC,cAfDA,EAgBJ,QAGIC,EACL,OADKA,EAEF,UAFEA,EAGQ,sBAGRC,EAAQ,CACnBC,OAAQ,aACRC,OAAQ,eACRC,MAAO,eACPC,QAAS,6BCwBEC,GAAKC,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,uYA+IhB,KAAAC,mBAAqB,UAwErB,KAAAC,cAAgB,KACdC,KAAKC,MAAQD,KAAKC,KAClBD,KAAKE,mBAAmBC,MAAM,EAGxB,KAAAC,gBAAmBC,IACzBL,KAAKM,aAAeD,CAAE,oBA3Me,iBAKH,mBAKE,6DAeH,aAKY,uHA4CmB,mEAzClEE,WAAAA,IACEC,EAAAA,EAAAA,GAA2BR,MA4B7BS,gBAAAA,IAyBA,cAAMC,SACEC,EAAAA,EAAAA,GAAmBX,OACzBY,EAAAA,EAAAA,GAAmBZ,KAAKK,IAG1BQ,YAAAA,GACEb,KAAKc,uBAAuBX,OAG9BY,MAAAA,GACEf,KAAKgB,iBAAiBb,OAGxBc,aAAAA,GACEjB,KAAKkB,wBAAwBf,OAG/BgB,OAAAA,GACEnB,KAAKoB,kBAAkBjB,OAczBkB,qBAAAA,IACEC,EAAAA,EAAAA,GAAetB,KAAMA,KAAKuB,iBAe5BC,iBAAAA,IACEC,EAAAA,EAAAA,GAAgCzB,OAChC0B,EAAAA,EAAAA,GAAmB1B,OACnB2B,EAAAA,EAAAA,GAAiB3B,OACjB4B,EAAAA,EAAAA,GAAgB5B,MAGlB6B,oBAAAA,IACEC,EAAAA,EAAAA,GAAsB9B,OACtB+B,EAAAA,EAAAA,GAAoB/B,OACpBgC,EAAAA,EAAAA,GAAmBhC,OACnBiC,EAAAA,EAAAA,GAAmCjC,MAGrC,uBAAMkC,SACEC,EAAAA,EAAAA,GAAcnC,OACpBoC,EAAAA,EAAAA,GAAuBpC,MAEnBA,KAAKC,OACPO,EAAAA,EAAAA,GAA2BR,MAI/BqC,gBAAAA,IACEC,EAAAA,EAAAA,GAAmBtC,MAGrBuC,kBAAAA,IACEC,EAAAA,EAAAA,GAAsBxC,MAiDxByC,WAAAA,GACE,MAAM,QAAEC,GAAY1C,KACd2C,GAAcC,EAAAA,EAAAA,GAAA,aAEpB,MAAO,CAACF,GAAUE,EAAAA,EAAAA,GAAA,iBAAeF,QAASA,IAAc,KAAMC,GAGhEE,UAAAA,GACE,MAAM,QAAEH,EAAO,SAAEI,EAAQ,OAAEC,GAAW/C,KAEhCgD,KAAmBC,EAAAA,EAAAA,GAAWjD,KAAKK,GAAIhB,GAE7C,OAAOqD,GACLE,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,EAAU+D,IAAI,WACxBP,EAAAA,EAAAA,GAAA,kBAAgBQ,QAAM,EAACC,MAAOP,EAASJ,WAErCK,GACJH,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,EAAU+D,IAAI,gBACxBP,EAAAA,EAAAA,GAAA,gBACEM,MAAO,CACL,CAAC9D,IAAiB,EAClB,CAACA,GAAsB,SAAV2D,EACb,CAAC3D,GAAwB,WAAV2D,GAEjBO,KAAMhE,EAAMyD,GACZQ,MAAM,OAGRP,GACFJ,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,EAAU+D,IAAI,cACxBP,EAAAA,EAAAA,GAAA,QAAMO,IAAI,YAAYK,KAAMnE,KAE5B,KAGNoE,WAAAA,GACE,MAAM,QAAEC,EAAO,aAAEC,EAAY,YAAEC,GAAgB5D,KAC/C,OAAO0D,GAAWE,GAChBhB,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,IACVwD,EAAAA,EAAAA,GAACiB,EAAAA,EAAO,CAACX,MAAO9D,EAAa0E,MAAOH,GACjCD,GAEFE,GAAchB,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,GAAkBwE,GAAqB,MAElE,KAGNG,MAAAA,GACE,MAAM,YAAEC,EAAW,GAAE3D,EAAE,QAAEqC,EAAO,KAAEzC,EAAI,QAAEyD,EAAO,SAAEZ,GAAa9C,KAExDiE,EAAchE,EAAO6C,EAASoB,SAAWpB,EAASqB,OAElDC,GACJxB,EAAAA,EAAAA,GAAA,UAAQM,MAAO9D,EAAYiF,GAAIlF,GAC5Ba,KAAK6C,aACL7C,KAAKyD,eAIJa,KAAerB,EAAAA,EAAAA,GAAW5C,EAAIhB,GAC9BkF,KAAmBtB,EAAAA,EAAAA,GAAW5C,EAAIhB,GAClCmF,EAAevE,EAAOX,EAAMC,OAASD,EAAME,OAE3CiF,GACJ7B,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,GACTY,KAAK0E,YAAa9B,EAAAA,EAAAA,GAAA,kBAAgBS,MAAOK,IAAc,KACvDM,GACCpB,EAAAA,EAAAA,GAAA,0BACiBzD,EAAW,mBACRA,EAAU,gBACb6E,GAAcW,EAAAA,EAAAA,GAAc1E,GAAQ,KACnDiD,MAAO9D,EACPiF,GAAIlF,EACJyF,QAAS5E,KAAKD,cACd8E,MAAOZ,GAENG,GACDxB,EAAAA,EAAAA,GAAA,8BAA0B,OAAOM,MAAO9D,EAAgBkE,KAAMkB,EAAcjB,MAAM,OAGpFa,EAEDE,GACC1B,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,IACVwD,EAAAA,EAAAA,GAAA,QAAMY,KAAMnE,KAEZ,KACHkF,GACC3B,EAAAA,EAAAA,GAAA,uBACES,MAAOP,EAASgC,QAChBC,mBAAoB/E,KAAK+E,qBAEzBnC,EAAAA,EAAAA,GAAA,QAAMY,KAAMnE,KAEZ,MAIR,OACEuD,EAAAA,EAAAA,GAACoC,EAAAA,GAAI,MACHpC,EAAAA,EAAAA,GAACqC,EAAAA,EAAoB,CAACC,SAAUlF,KAAKkF,WACnCtC,EAAAA,EAAAA,GAAA,wBACa+B,EAAAA,EAAAA,GAAcjC,GACzBQ,MAAO,CACL,CAAC9D,IAAgB,IAGlBqF,GACD7B,EAAAA,EAAAA,GAAA,6BACmBzD,EACjB+D,MAAO9D,EACP+F,QAASlF,EACToE,GAAIlF,EAEJiG,IAAKpF,KAAKI,iBAETJ,KAAKyC,4OCrZH,i/KCGjB,MAAM4C,EAAW,IAAIC,IAkBrB,IAAIC,EACJ,MAAMC,EAAiF,CAAEC,WAAW,YAYpFhE,EAAgCiE,GACzCH,IACHA,GAAmBI,EAAAA,EAAAA,GAAe,WAAYC,IAGhDL,EAAiBM,QAAQH,EAAUrF,GAAImF,EACzC,UAYgBvD,EAAmCyD,GACjDL,EAASS,OAAOJ,EAAUrF,IAK1BuF,EAAiBL,EAAiBQ,eAClCR,EAAiBS,aACjB,IAAK,MAAOC,KAAYZ,EAASa,UAC/BX,EAAiBM,QAAQI,EAAST,EAEtC,CAEA,SAASI,EAAiBO,GACxBA,EAAUC,SAAQC,IAAW,IAAV,OAAEC,GAAQD,GAC3BE,EAAAA,EAAAA,IAAYD,EAAO,GAEvB,qHCrEO,MAAMlH,EACH,SADGA,EAEK,mBAGLE,EACL,OAGKkH,EACA,cADAA,EAED,aAFCA,EAGJ,UC+BIC,GAAM7G,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,iSAkNjB,KAAA6G,cAAiBC,IACf,IAAI3G,KAAKkF,SAIT,OAAQyB,EAAMxD,KACZ,IAAK,IACHnD,KAAK4G,UAAY5G,KAAK4G,SACtB5G,KAAK6G,oBAAoB1G,OACzBwG,EAAMG,iBACN,MACF,IAAK,UACH,IAAK9G,KAAK4G,SACR,OAEFD,EAAMG,iBACN9G,KAAK+G,mBAAmB5G,KAAK,CAAE6G,UAAW,OAC1C,MACF,IAAK,YACH,IAAKhH,KAAK4G,SACR,OAEFD,EAAMG,iBACN9G,KAAK+G,mBAAmB5G,KAAK,CAAE6G,UAAW,WAKhD,KAAAC,WAAa,KACPjH,KAAKkH,sBAAwBlH,KAAKkF,UAIlClF,KAAK4G,WACP5G,KAAK4G,UAAW,EAChB5G,KAAK6G,oBAAoB1G,wBA3OsB,iBAoBf,uIAwCL,uFArD/BgH,oBAAAA,GACE,MAAMC,EAAUpH,KAAKqH,YAAY,QAE7BD,GACFpH,KAAKsH,mCAAmCnH,KAAK,CAC3CiH,YAwDN3G,gBAAAA,IAUAe,iBAAAA,IACEE,EAAAA,EAAAA,GAAmB1B,OACnB4B,EAAAA,EAAAA,GAAgB5B,OAChB2B,EAAAA,EAAAA,GAAiB3B,MAGnB,uBAAMkC,IACJE,EAAAA,EAAAA,GAAuBpC,YACjBmC,EAAAA,EAAAA,GAAcnC,MAGtBqC,gBAAAA,IACEC,EAAAA,EAAAA,GAAmBtC,MAGrBuC,kBAAAA,IACEC,EAAAA,EAAAA,GAAsBxC,MAGxB6B,oBAAAA,IACEC,EAAAA,EAAAA,GAAsB9B,OACtBgC,EAAAA,EAAAA,GAAmBhC,OACnB+B,EAAAA,EAAAA,GAAoB/B,MAkBtBqB,qBAAAA,IACEC,EAAAA,EAAAA,GAAetB,KAAMA,KAAKuB,iBAkC5B,cAAMb,GAAQ,IAAA6G,QACN5G,EAAAA,EAAAA,GAAmBX,MAER,QAAjBuH,EAAAvH,KAAKwH,oBAAY,IAAAD,GAAjBA,EAAmBE,QASbC,UAAAA,GACN,MAAM,MAAErE,EAAK,SAAEP,GAAa9C,KAE5B,OAAK8C,EAIAO,EAIEP,EAAS4B,WAAWiD,QAAQnB,EAAyBnD,GAHnDP,EAAS8E,mBAJT,GAUXP,WAAAA,CAAYQ,GACV,MAAM,YAAEC,EAAW,QAAEC,EAAO,MAAE1E,EAAK,SAAEP,EAAQ,SAAE8D,GAAa5G,KAE5D,IAAK8C,IAAaO,GAA4B,kBAAZ0E,GAA+C,kBAAhBD,EAC/D,OAAO,KAcT,OAVW,UAATD,EACIjB,EACE9D,EAASkF,iBACTlF,EAASmF,eACXrB,EACE9D,EAASoF,iBACTpF,EAASqF,kBAEYR,QAAQnB,EAAwBsB,EAAYM,YACpCT,QAAQnB,EAAyBnD,GAClDsE,QAAQnB,EAAqBuB,EAAQK,YAgD3DrE,MAAAA,GACE,OAEEnB,EAAAA,EAAAA,GAAA,wBACiB5C,KAAKkF,UAAWP,EAAAA,EAAAA,GAAc3E,KAAKkF,UAAY,KAAI,aACtDlF,KAAKkF,SAAW,KAAOlF,KAAKqH,YAAY,SAAQ,eAC9CrH,KAAKkF,SAAW,MAAOP,EAAAA,EAAAA,GAAc3E,KAAK4G,UACxD1D,MAAO,CAAE,CAAC9D,IAAa,EAAM,CAACA,IAAsBY,KAAKkF,UAAYlF,KAAK4G,UAC1EyB,OAAQrI,KAAKiH,WACbqB,UAAWtI,KAAK0G,cAChB6B,KAAK,SACLC,SAAUxI,KAAKkF,SAAW,KAAO,EACjCL,MAAO7E,KAAK0H,aAEZtC,IAAM/E,IACJL,KAAKwH,aAAenH,CAAE,IAGxBuC,EAAAA,EAAAA,GAAA,gBAAcU,KAAMhE,EAAYiE,MAAM,qXC5T5B,iyECAX,MAAMnE,EACJ,QADIA,EAEF,UAGEqJ,EACR,GADQA,EAGR,ICgBQC,GAAK9I,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,qEAuChB,KAAA8I,gBAAiBhD,EAAAA,EAAAA,GAAe,UAAU,IAAM3F,KAAK4I,iBAuE7C,KAAAC,wBAA2BlC,IACjC3G,KAAK8I,YAAaC,EAAAA,EAAAA,GAAqBpC,EAAM,EAGvC,KAAAqC,cAAiB3I,IACvBL,KAAKiJ,SAAW5I,EAChBL,KAAK4I,cAAc,gBA1Gc,6HAqCR,oBAOL,EA3BtBnI,gBAAAA,IAuBAY,qBAAAA,IACEC,EAAAA,EAAAA,GAAetB,KAAMA,KAAKuB,iBAW5BC,iBAAAA,GAAiB,IAAA0H,GACfvH,EAAAA,EAAAA,GAAiB3B,OACjB4B,EAAAA,EAAAA,GAAgB5B,MACG,QAAnBkJ,EAAAlJ,KAAK2I,sBAAc,IAAAO,GAAnBA,EAAqBrD,QAAQ7F,KAAKK,IAGpC,uBAAM6B,SACEC,EAAAA,EAAAA,GAAcnC,MAGtB6B,oBAAAA,GAAoB,IAAAsH,GAClBpH,EAAAA,EAAAA,GAAoB/B,OACpBgC,EAAAA,EAAAA,GAAmBhC,MACA,QAAnBmJ,EAAAnJ,KAAK2I,sBAAc,IAAAQ,GAAnBA,EAAqBnD,aASvBjC,MAAAA,GACE,MAAM,WAAE+E,EAAU,QAAEpG,EAAO,SAAEI,GAAa9C,KAE1C,OACE4C,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,GACTsD,GACCE,EAAAA,EAAAA,GAAA,kBACES,MAAOP,EAASJ,QAChBa,MAAOvD,KAAKoJ,YAEZhE,IAAKpF,KAAKgJ,gBAEV,MACJpG,EAAAA,EAAAA,GAAA,OAAKM,MAAO9D,EAAa+F,QAAS2D,IAChClG,EAAAA,EAAAA,GAAA,QAAMyG,aAAcrJ,KAAK6I,4BAqBzBS,QAAAA,CAASC,GACf,OAAIA,EAAOd,EACF,IACEc,GAAQd,EACV,IAEA,IAIHG,YAAAA,GAAY,IAAAY,EAClB,MAAM,SAAEP,EAAQ,GAAE5I,GAAOL,KAEpBiJ,IAILjJ,KAAKoJ,YAAcpJ,KAAKsJ,SAAkD,QAA1CE,EAACC,KAAKC,IAAIrJ,EAAGsJ,aAActJ,EAAGuJ,oBAAY,IAAAJ,EAAAA,EAAI,yMChKjE","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/block/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/block/block.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/block/block.scss?tag=calcite-block&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts","../node_modules/@esri/calcite-components/dist/components/src/components/handle/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/handle/handle.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/handle/handle.scss?tag=calcite-handle&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/scrim.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/scrim.scss?tag=calcite-scrim&encapsulation=shadow"],"sourcesContent":["export const IDS = {\n  content: \"content\",\n  toggle: \"toggle\",\n  header: \"header\",\n};\n\nexport const CSS = {\n  button: \"button\",\n  container: \"container\",\n  content: \"content\",\n  controlContainer: \"control-container\",\n  description: \"description\",\n  header: \"header\",\n  headerContainer: \"header-container\",\n  heading: \"heading\",\n  icon: \"icon\",\n  invalid: \"invalid\",\n  statusIcon: \"status-icon\",\n  summary: \"summary\",\n  title: \"title\",\n  toggle: \"toggle\",\n  toggleIcon: \"toggle-icon\",\n  valid: \"valid\",\n};\n\nexport const SLOTS = {\n  icon: \"icon\",\n  control: \"control\",\n  headerMenuActions: \"header-menu-actions\",\n};\n\nexport const ICONS = {\n  opened: \"chevron-up\",\n  closed: \"chevron-down\",\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { focusFirstTabbable, getSlotted, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Heading, HeadingLevel } from \"../functional/Heading\";\nimport { Status } from \"../interfaces\";\nimport { BlockMessages } from \"./assets/block/t9n\";\nimport { CSS, ICONS, IDS, SLOTS } from \"./resources\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\n\n/**\n * @slot - A slot for adding custom content.\n * @slot icon - A slot for adding a leading header icon with `calcite-icon`.\n * @slot control - A slot for adding a single HTML input element in a header.\n * @slot header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu.\n */\n@Component({\n  tag: \"calcite-block\",\n  styleUrl: \"block.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Block\n  implements\n    ConditionalSlotComponent,\n    InteractiveComponent,\n    LocalizedComponent,\n    T9nComponent,\n    LoadableComponent,\n    OpenCloseComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is collapsible.\n   */\n  @Prop({ reflect: true }) collapsible = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When `true`, displays a drag handle in the header.\n   */\n  @Prop({ reflect: true }) dragHandle = false;\n\n  /**\n   * The component header text.\n   */\n  @Prop() heading!: string;\n\n  /**\n   * Specifies the number at which section headings should start.\n   */\n  @Prop({ reflect: true }) headingLevel: HeadingLevel;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * When `true`, expands the component and its contents.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /**\n   * Displays a status-related indicator icon.\n   */\n  @Prop({ reflect: true }) status: Status;\n\n  /**\n   * A description for the component, which displays below the heading.\n   */\n  @Prop() description: string;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: BlockMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<BlockMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first tabbable element.\n   *\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  onBeforeOpen(): void {\n    this.calciteBlockBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteBlockOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteBlockBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteBlockClose.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteBlockElement;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: BlockMessages;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteBlockBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteBlockBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteBlockClose: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteBlockOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's header is clicked.\n   *\n   * @deprecated Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead.\n   */\n  @Event({ cancelable: false }) calciteBlockToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onHeaderClick = (): void => {\n    this.open = !this.open;\n    this.calciteBlockToggle.emit();\n  };\n\n  private setTransitionEl = (el: HTMLElement): void => {\n    this.transitionEl = el;\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderScrim(): VNode[] {\n    const { loading } = this;\n    const defaultSlot = <slot />;\n\n    return [loading ? <calcite-scrim loading={loading} /> : null, defaultSlot];\n  }\n\n  renderIcon(): VNode[] {\n    const { loading, messages, status } = this;\n\n    const hasSlottedIcon = !!getSlotted(this.el, SLOTS.icon);\n\n    return loading ? (\n      <div class={CSS.icon} key=\"loader\">\n        <calcite-loader inline label={messages.loading} />\n      </div>\n    ) : !!status ? (\n      <div class={CSS.icon} key=\"status-icon\">\n        <calcite-icon\n          class={{\n            [CSS.statusIcon]: true,\n            [CSS.valid]: status == \"valid\",\n            [CSS.invalid]: status == \"invalid\",\n          }}\n          icon={ICONS[status]}\n          scale=\"s\"\n        />\n      </div>\n    ) : hasSlottedIcon ? (\n      <div class={CSS.icon} key=\"icon-slot\">\n        <slot key=\"icon-slot\" name={SLOTS.icon} />\n      </div>\n    ) : null;\n  }\n\n  renderTitle(): VNode {\n    const { heading, headingLevel, description } = this;\n    return heading || description ? (\n      <div class={CSS.title}>\n        <Heading class={CSS.heading} level={headingLevel}>\n          {heading}\n        </Heading>\n        {description ? <div class={CSS.description}>{description}</div> : null}\n      </div>\n    ) : null;\n  }\n\n  render(): VNode {\n    const { collapsible, el, loading, open, heading, messages } = this;\n\n    const toggleLabel = open ? messages.collapse : messages.expand;\n\n    const headerContent = (\n      <header class={CSS.header} id={IDS.header}>\n        {this.renderIcon()}\n        {this.renderTitle()}\n      </header>\n    );\n\n    const hasControl = !!getSlotted(el, SLOTS.control);\n    const hasMenuActions = !!getSlotted(el, SLOTS.headerMenuActions);\n    const collapseIcon = open ? ICONS.opened : ICONS.closed;\n\n    const headerNode = (\n      <div class={CSS.headerContainer}>\n        {this.dragHandle ? <calcite-handle label={heading} /> : null}\n        {collapsible ? (\n          <button\n            aria-controls={IDS.content}\n            aria-describedby={IDS.header}\n            aria-expanded={collapsible ? toAriaBoolean(open) : null}\n            class={CSS.toggle}\n            id={IDS.toggle}\n            onClick={this.onHeaderClick}\n            title={toggleLabel}\n          >\n            {headerContent}\n            <calcite-icon aria-hidden=\"true\" class={CSS.toggleIcon} icon={collapseIcon} scale=\"s\" />\n          </button>\n        ) : (\n          headerContent\n        )}\n        {hasControl ? (\n          <div class={CSS.controlContainer}>\n            <slot name={SLOTS.control} />\n          </div>\n        ) : null}\n        {hasMenuActions ? (\n          <calcite-action-menu\n            label={messages.options}\n            overlayPositioning={this.overlayPositioning}\n          >\n            <slot name={SLOTS.headerMenuActions} />\n          </calcite-action-menu>\n        ) : null}\n      </div>\n    );\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <article\n            aria-busy={toAriaBoolean(loading)}\n            class={{\n              [CSS.container]: true,\n            }}\n          >\n            {headerNode}\n            <section\n              aria-labelledby={IDS.toggle}\n              class={CSS.content}\n              hidden={!open}\n              id={IDS.content}\n              // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n              ref={this.setTransitionEl}\n            >\n              {this.renderScrim()}\n            </section>\n          </article>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-block-padding: Specifies the padding of the block `default` slot.\n */\n\n:host {\n  @extend %component-host;\n  @extend %component-spacing;\n  @apply transition-margin ease-cubic border-color-3 flex flex-shrink-0 flex-grow-0\n    flex-col border-0 border-b border-solid p-0 duration-150;\n  flex-basis: auto;\n}\n\n@include disabled();\n\n@import \"../../assets/styles/animation\";\n@import \"../../assets/styles/header\";\n\n.header {\n  @apply justify-start p-0;\n}\n\n.header,\n.toggle {\n  grid-area: header;\n}\n\n.header-container {\n  @apply grid items-stretch;\n  grid-template: auto / auto 1fr auto auto;\n  grid-template-areas: \"handle header control menu\";\n  grid-column: header-start / menu-end;\n  grid-row: 1 / 2;\n}\n\n.toggle {\n  @apply font-inherit\n    focus-base\n    m-0\n    flex\n    cursor-pointer\n    flex-nowrap\n    items-center\n    justify-between\n    border-none\n    p-0;\n  text-align: initial;\n\n  background-color: transparent;\n  &:hover {\n    @apply bg-foreground-2;\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\ncalcite-loader[inline] {\n  grid-area: control;\n  @apply self-center;\n}\n\ncalcite-handle {\n  grid-area: handle;\n}\n\n.title {\n  @apply m-0;\n  padding: theme(\"spacing.3\");\n}\n\n.header .title .heading {\n  @apply text-n1\n    text-color-2\n    word-break\n    transition-color\n    p-0\n    font-medium\n    leading-tight\n    duration-150\n    ease-in-out;\n}\n\n.description {\n  @apply text-n2-wrap\n    text-color-3\n    word-break\n    mt-0.5\n    p-0;\n}\n\n.icon {\n  display: flex;\n  margin-inline-start: theme(\"spacing.3\");\n  margin-inline-end: 0px;\n}\n\n.status-icon.valid {\n  color: theme(\"colors.success\");\n}\n\n.status-icon.invalid {\n  color: theme(\"colors.danger\");\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(180deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.toggle-icon {\n  @apply text-color-3\n  transition-color\n  my-3\n  self-center\n  justify-self-end\n  duration-150\n  ease-in-out;\n  margin-inline-end: theme(\"spacing.3\");\n  margin-inline-start: auto;\n}\n\n.toggle:hover .toggle-icon {\n  @apply text-color-1;\n}\n\n.container {\n  @apply flex flex-col h-full relative;\n}\n\n.content {\n  @apply animate-in flex-1 relative min-h-0;\n  padding-block: var(--calcite-block-padding, theme(\"spacing.2\"));\n  padding-inline: var(--calcite-block-padding, theme(\"spacing[2.5]\"));\n}\n\n.control-container {\n  @apply m-0 flex;\n  grid-area: control;\n}\n\ncalcite-action-menu {\n  grid-area: menu;\n}\n\n:host([open]) {\n  @apply my-2;\n\n  .header .title .heading {\n    @apply text-color-1;\n  }\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver } from \"./observers\";\n\nconst observed = new Set<HTMLElement>();\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: MutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  observed.delete(component.el);\n\n  // we explicitly process queued mutations and disconnect and reconnect\n  // the observer until MutationObserver gets an `unobserve` method\n  // see https://github.com/whatwg/dom/issues/126\n  processMutations(mutationObserver.takeRecords());\n  mutationObserver.disconnect();\n  for (const [element] of observed.entries()) {\n    mutationObserver.observe(element, observerOptions);\n  }\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n","export const CSS = {\n  handle: \"handle\",\n  handleSelected: \"handle--selected\",\n};\n\nexport const ICONS = {\n  drag: \"drag\",\n};\n\nexport const SUBSTITUTIONS = {\n  itemLabel: \"{itemLabel}\",\n  position: \"{position}\",\n  total: \"{total}\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { HandleMessages } from \"./assets/handle/t9n\";\nimport { HandleChange, HandleNudge } from \"./interfaces\";\nimport { CSS, ICONS, SUBSTITUTIONS } from \"./resources\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\n\n@Component({\n  tag: \"calcite-handle\",\n  styleUrl: \"handle.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Handle implements LoadableComponent, T9nComponent, InteractiveComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({ mutable: true, reflect: true }) selected = false;\n\n  @Watch(\"messages\")\n  @Watch(\"label\")\n  @Watch(\"selected\")\n  @Watch(\"setPosition\")\n  @Watch(\"setSize\")\n  handleAriaTextChange(): void {\n    const message = this.getAriaText(\"live\");\n\n    if (message) {\n      this.calciteInternalAssistiveTextChange.emit({\n        message,\n      });\n    }\n  }\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * Value for the button title attribute.\n   */\n  @Prop({ reflect: true }) dragHandle: string;\n\n  /**\n   * Made into a prop for testing purposes only.\n   *\n   * @internal\n   */\n  @Prop() messages: HandleMessages;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() setPosition: number;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() setSize: number;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() label: string;\n\n  /**\n   * When `true`, disables unselecting the component when blurred.\n   *\n   * @internal\n   */\n  @Prop() blurUnselectDisabled = false;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  @Prop() messageOverrides: Partial<HandleMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectMessages(this);\n    connectLocalized(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectMessages(this);\n    disconnectLocalized(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteHandleElement;\n\n  handleButton: HTMLElement;\n\n  @State() effectiveLocale: string;\n\n  @State() defaultMessages: HandleMessages;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires whenever the component is selected or unselected.\n   *\n   */\n  @Event({ cancelable: false }) calciteHandleChange: EventEmitter<void>;\n\n  /**\n   * Fires when the handle is selected and the up or down arrow key is pressed.\n   */\n  @Event({ cancelable: false }) calciteHandleNudge: EventEmitter<HandleNudge>;\n\n  /**\n   * Fires when the assistive text has changed.\n   * @internal\n   */\n  @Event({ cancelable: false }) calciteInternalAssistiveTextChange: EventEmitter<HandleChange>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.handleButton?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private getTooltip(): string {\n    const { label, messages } = this;\n\n    if (!messages) {\n      return \"\";\n    }\n\n    if (!label) {\n      return messages.dragHandleUntitled;\n    }\n\n    return messages.dragHandle.replace(SUBSTITUTIONS.itemLabel, label);\n  }\n\n  getAriaText(type: \"label\" | \"live\"): string {\n    const { setPosition, setSize, label, messages, selected } = this;\n\n    if (!messages || !label || typeof setSize !== \"number\" || typeof setPosition !== \"number\") {\n      return null;\n    }\n\n    const text =\n      type === \"label\"\n        ? selected\n          ? messages.dragHandleChange\n          : messages.dragHandleIdle\n        : selected\n          ? messages.dragHandleActive\n          : messages.dragHandleCommit;\n\n    const replacePosition = text.replace(SUBSTITUTIONS.position, setPosition.toString());\n    const replaceLabel = replacePosition.replace(SUBSTITUTIONS.itemLabel, label);\n    return replaceLabel.replace(SUBSTITUTIONS.total, setSize.toString());\n  }\n\n  handleKeyDown = (event: KeyboardEvent): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.key) {\n      case \" \":\n        this.selected = !this.selected;\n        this.calciteHandleChange.emit();\n        event.preventDefault();\n        break;\n      case \"ArrowUp\":\n        if (!this.selected) {\n          return;\n        }\n        event.preventDefault();\n        this.calciteHandleNudge.emit({ direction: \"up\" });\n        break;\n      case \"ArrowDown\":\n        if (!this.selected) {\n          return;\n        }\n        event.preventDefault();\n        this.calciteHandleNudge.emit({ direction: \"down\" });\n        break;\n    }\n  };\n\n  handleBlur = (): void => {\n    if (this.blurUnselectDisabled || this.disabled) {\n      return;\n    }\n\n    if (this.selected) {\n      this.selected = false;\n      this.calciteHandleChange.emit();\n    }\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      // Needs to be a span because of https://github.com/SortableJS/Sortable/issues/1486\n      <span\n        aria-disabled={this.disabled ? toAriaBoolean(this.disabled) : null}\n        aria-label={this.disabled ? null : this.getAriaText(\"label\")}\n        aria-pressed={this.disabled ? null : toAriaBoolean(this.selected)}\n        class={{ [CSS.handle]: true, [CSS.handleSelected]: !this.disabled && this.selected }}\n        onBlur={this.handleBlur}\n        onKeyDown={this.handleKeyDown}\n        role=\"button\"\n        tabIndex={this.disabled ? null : 0}\n        title={this.getTooltip()}\n        // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n        ref={(el): void => {\n          this.handleButton = el;\n        }}\n      >\n        <calcite-icon icon={ICONS.drag} scale=\"s\" />\n      </span>\n    );\n  }\n}\n",":host {\n  @apply flex;\n}\n\n.handle {\n  @apply focus-base\n    flex\n    items-center\n    justify-center\n    self-stretch\n    border-none\n    bg-transparent;\n  color: theme(\"borderColor.color.input\");\n  padding-block: theme(\"spacing.3\");\n  padding-inline: theme(\"spacing.1\");\n  line-height: 0;\n\n  calcite-icon {\n    color: inherit;\n  }\n}\n\n:host(:not([disabled])) .handle {\n  @apply cursor-move;\n  &:hover {\n    @apply bg-foreground-2 text-color-1;\n  }\n  &:focus {\n    @apply text-color-1 focus-inset;\n  }\n  &--selected {\n    @apply bg-foreground-3 text-color-1;\n  }\n}\n\n@include disabled();\n\n@include base-component();\n","export const CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\n\nexport const BREAKPOINTS = {\n  s: 72, // Less than 72px.\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n","import { Component, Element, h, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ScrimMessages } from \"./assets/scrim/t9n\";\nimport { CSS, BREAKPOINTS } from \"./resources\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { slotChangeHasContent } from \"../../utils/dom\";\n\n/**\n * @slot - A slot for adding custom content, primarily loading information.\n */\n@Component({\n  tag: \"calcite-scrim\",\n  styleUrl: \"scrim.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Scrim implements LocalizedComponent, T9nComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ScrimMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ScrimMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteScrimElement;\n\n  resizeObserver = createObserver(\"resize\", () => this.handleResize());\n\n  loaderEl: HTMLCalciteLoaderElement;\n\n  @State() loaderScale: Scale;\n\n  @State() defaultMessages: ScrimMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() hasContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { hasContent, loading, messages } = this;\n\n    return (\n      <div class={CSS.scrim}>\n        {loading ? (\n          <calcite-loader\n            label={messages.loading}\n            scale={this.loaderScale}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={this.storeLoaderEl}\n          />\n        ) : null}\n        <div class={CSS.content} hidden={!hasContent}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private handleDefaultSlotChange = (event: Event): void => {\n    this.hasContent = slotChangeHasContent(event);\n  };\n\n  private storeLoaderEl = (el: HTMLCalciteLoaderElement): void => {\n    this.loaderEl = el;\n    this.handleResize();\n  };\n\n  private getScale(size: number): Scale {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    } else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    } else {\n      return \"m\";\n    }\n  }\n\n  private handleResize(): void {\n    const { loaderEl, el } = this;\n\n    if (!loaderEl) {\n      return;\n    }\n\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-scrim-background: Specifies the background color of the scrim.\n */\n:host {\n  --calcite-scrim-background: var(--calcite-color-transparent-scrim);\n}\n\n:host {\n  @apply absolute\n  inset-0\n  z-overlay\n  flex\n  h-full\n  w-full\n  flex-col\n  items-stretch;\n}\n\n@keyframes calcite-scrim-fade-in {\n  0% {\n    @apply bg-opacity-0;\n  }\n  100% {\n    @apply text-opacity-100;\n  }\n}\n\n.scrim {\n  @apply absolute\n  inset-0\n  flex\n  flex-col\n  content-center\n  items-center\n  justify-center\n  overflow-hidden;\n  animation: calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;\n  background-color: var(--calcite-scrim-background, var(--calcite-color-transparent-scrim));\n}\n\n.content {\n  @apply p-4;\n}\n\n@include base-component();\n"],"names":["IDS","CSS","SLOTS","ICONS","opened","closed","valid","invalid","Block","proxyCustomElement","HTMLElement","openTransitionProp","onHeaderClick","this","open","calciteBlockToggle","emit","setTransitionEl","el","transitionEl","openHandler","onToggleOpenCloseComponent","onMessagesChange","setFocus","componentFocusable","focusFirstTabbable","onBeforeOpen","calciteBlockBeforeOpen","onOpen","calciteBlockOpen","onBeforeClose","calciteBlockBeforeClose","onClose","calciteBlockClose","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectConditionalSlotComponent","connectInteractive","connectLocalized","connectMessages","disconnectedCallback","disconnectInteractive","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpMessages","setUpLoadableComponent","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","renderScrim","loading","defaultSlot","h","renderIcon","messages","status","hasSlottedIcon","getSlotted","class","key","inline","label","icon","scale","name","renderTitle","heading","headingLevel","description","Heading","level","render","collapsible","toggleLabel","collapse","expand","headerContent","id","hasControl","hasMenuActions","collapseIcon","headerNode","dragHandle","toAriaBoolean","onClick","title","options","overlayPositioning","Host","InteractiveContainer","disabled","hidden","ref","observed","Set","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","delete","takeRecords","disconnect","element","entries","mutations","forEach","_ref","target","forceUpdate","SUBSTITUTIONS","Handle","handleKeyDown","event","selected","calciteHandleChange","preventDefault","calciteHandleNudge","direction","handleBlur","blurUnselectDisabled","handleAriaTextChange","message","getAriaText","calciteInternalAssistiveTextChange","_this$handleButton","handleButton","focus","getTooltip","replace","dragHandleUntitled","type","setPosition","setSize","dragHandleChange","dragHandleIdle","dragHandleActive","dragHandleCommit","toString","onBlur","onKeyDown","role","tabIndex","BREAKPOINTS","Scrim","resizeObserver","handleResize","handleDefaultSlotChange","hasContent","slotChangeHasContent","storeLoaderEl","loaderEl","_this$resizeObserver","_this$resizeObserver2","loaderScale","onSlotchange","getScale","size","_Math$min","Math","min","clientHeight","clientWidth"],"sourceRoot":""}