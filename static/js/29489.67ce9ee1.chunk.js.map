{"version":3,"file":"static/js/29489.67ce9ee1.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts","../node_modules/@esri/calcite-components/dist/components/src/components/table-header/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/table-header/table-header.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/table-header/table-header.scss?tag=calcite-table-header&encapsulation=shadow"],"sourcesContent":["import { Scale } from \"../components/interfaces\";\nimport { HTMLStencilElement } from \"@stencil/core/internal\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nexport async function fetchIcon({ icon, scale }: FetchIconProps): Promise<CalciteIconPath> {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[id];\n  iconCache[id] = path;\n\n  return path;\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.loadIconPathData();\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const pathData = await fetchIcon({ icon, scale });\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","import { Build, forceUpdate } from \"@stencil/core\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!Build.isBrowser) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { Build, getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!Build.isBrowser) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  component.onMessagesChange = undefined;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange(): void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n","export const CSS = {\n  contentCell: \"content-cell\",\n  numberCell: \"number-cell\",\n  selectionCell: \"selection-cell\",\n  bodyRow: \"body-row\",\n  footerRow: \"footer-row\",\n  heading: \"heading\",\n  description: \"description\",\n  multipleSelectionCell: \"cell--multiple-selection\",\n  assistiveText: \"assistive-text\",\n  active: \"active\",\n  selectedCell: \"selected-cell\",\n  lastCell: \"last-cell\",\n  staticCell: \"static-cell\",\n};\n","import { Component, Element, h, Host, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { Alignment, Scale, SelectionMode } from \"../interfaces\";\nimport { TableHeaderMessages } from \"./assets/table-header/t9n\";\nimport { CSS } from \"./resources\";\nimport { RowType, TableInteractionMode } from \"../table/interfaces\";\nimport { getIconScale } from \"../../utils/component\";\n\n@Component({\n  tag: \"calcite-table-header\",\n  styleUrl: \"table-header.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class TableHeader implements LocalizedComponent, LoadableComponent, T9nComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the alignment of the component. */\n  @Prop({ reflect: true }) alignment: Alignment = \"start\";\n\n  /** Specifies the number of columns the component should span. */\n  @Prop({ reflect: true }) colSpan: number;\n\n  /** A description to display beneath heading content. */\n  @Prop({ reflect: true }) description: string;\n\n  /** A heading to display above description content. */\n  @Prop({ reflect: true }) heading: string;\n\n  /** Specifies the number of rows the component should span. */\n  @Prop({ reflect: true }) rowSpan: number;\n\n  /** @internal */\n  @Prop() interactionMode: TableInteractionMode = \"interactive\";\n\n  /** @internal */\n  @Prop() lastCell: boolean;\n\n  /** @internal */\n  @Prop() numberCell = false;\n\n  /** @internal */\n  @Prop() parentRowAlignment: Alignment = \"start\";\n\n  /** @internal */\n  @Prop() parentRowIsSelected: boolean;\n\n  /** @internal */\n  @Prop() parentRowType: RowType;\n\n  /** @internal */\n  @Prop() positionInRow: number;\n\n  /** @internal */\n  @Prop() scale: Scale;\n\n  /** @internal */\n  @Prop() selectedRowCount: number;\n\n  /** @internal */\n  @Prop() selectedRowCountLocalized: string;\n\n  @Watch(\"selectedRowCount\")\n  @Watch(\"selectedRowCountLocalized\")\n  onSelectedChange(): void {\n    this.updateScreenReaderText();\n  }\n\n  /** @internal */\n  @Prop() selectionCell = false;\n\n  /** @internal */\n  @Prop() selectionMode: SelectionMode;\n\n  /** @internal */\n  @Prop() bodyRowCount: number;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: TableHeaderMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<TableHeaderMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.updateScreenReaderText();\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteTableHeaderElement;\n\n  @State() defaultMessages: TableHeaderMessages;\n\n  @State() focused = false;\n\n  @State() screenReaderText = \"\";\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  private containerEl: HTMLTableCellElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.containerEl.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private updateScreenReaderText(): void {\n    let text = \"\";\n    const sharedText = `${this.selectedRowCountLocalized} ${this.messages?.selected}`;\n    if (this.numberCell) {\n      text = this.messages?.rowNumber;\n    } else if (this.selectionMode === \"single\") {\n      text = `${this.messages?.selectionColumn}. ${sharedText}`;\n    } else if (this.bodyRowCount === this.selectedRowCount) {\n      text = `${this.messages?.selectionColumn}. ${this.messages?.all} ${sharedText} ${this.messages?.keyboardDeselectAll}`;\n    } else {\n      text = `${this.messages?.selectionColumn}. ${sharedText} ${this.messages?.keyboardSelectAll}`;\n    }\n    this.screenReaderText = text;\n  }\n\n  private onContainerBlur = (): void => {\n    this.focused = false;\n  };\n\n  private onContainerFocus = (): void => {\n    this.focused = true;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const scope = this.rowSpan\n      ? \"rowgroup\"\n      : this.colSpan\n        ? \"colgroup\"\n        : this.parentRowType === \"body\"\n          ? \"row\"\n          : \"col\";\n\n    const allSelected = this.selectedRowCount === this.bodyRowCount;\n    const selectionIcon = allSelected ? \"check-square-f\" : \"check-square\";\n    const staticCell = this.interactionMode === \"static\" && !this.selectionCell;\n    return (\n      <Host>\n        <th\n          aria-colindex={this.parentRowType === \"head\" ? this.positionInRow : undefined}\n          class={{\n            [CSS.bodyRow]: this.parentRowType === \"body\",\n            [CSS.footerRow]: this.parentRowType === \"foot\",\n            [CSS.contentCell]: !this.numberCell && !this.selectionCell,\n            [CSS.numberCell]: this.numberCell,\n            [CSS.selectionCell]: this.selectionCell,\n            [CSS.selectedCell]: this.parentRowIsSelected,\n            [CSS.multipleSelectionCell]: this.selectionMode === \"multiple\",\n            [CSS.staticCell]: staticCell,\n            [CSS.lastCell]: this.lastCell && (!this.rowSpan || (this.colSpan && !!this.rowSpan)),\n            [this.parentRowAlignment]:\n              this.parentRowAlignment === \"center\" || this.parentRowAlignment === \"end\",\n          }}\n          colSpan={this.colSpan}\n          onBlur={this.onContainerBlur}\n          onFocus={this.onContainerFocus}\n          role={this.parentRowType === \"head\" ? \"columnheader\" : \"rowheader\"}\n          rowSpan={this.rowSpan}\n          scope={scope}\n          tabIndex={this.selectionCell ? 0 : staticCell ? -1 : 0}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={(el) => (this.containerEl = el)}\n        >\n          {this.heading && <div class={CSS.heading}>{this.heading}</div>}\n          {this.description && <div class={CSS.description}>{this.description}</div>}\n          {this.selectionCell && this.selectionMode === \"multiple\" && (\n            <calcite-icon\n              class={{ [CSS.active]: allSelected }}\n              icon={selectionIcon}\n              scale={getIconScale(this.scale)}\n            />\n          )}\n          {(this.selectionCell || this.numberCell) && (\n            <span\n              aria-hidden={true}\n              aria-live={this.focused ? \"polite\" : \"off\"}\n              class={CSS.assistiveText}\n            >\n              {this.screenReaderText}\n            </span>\n          )}\n        </th>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-table-header-background: Specifies the background color of the component.\n * @prop --calcite-table-header-border-color: Specifies the border color of the component.\n */\n\n:host {\n  --calcite-internal-table-header-background: var(--calcite-table-header-background, var(--calcite-color-foreground-2));\n  --calcite-internal-table-header-border-color: var(--calcite-table-border-color, var(--calcite-color-border-3));\n  @apply contents;\n}\n\n:host([alignment=\"center\"]) th {\n  @apply text-center;\n}\n\n:host([alignment=\"end\"]) th {\n  @apply text-end;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\nth {\n  @apply text-color-1 text-start font-medium whitespace-normal;\n  font-size: var(--calcite-internal-table-cell-font-size);\n  border-inline-end: 1px solid var(--calcite-internal-table-header-border-color);\n  border-block-end: 1px solid var(--calcite-internal-table-header-border-color);\n  padding-block: calc(var(--calcite-internal-table-cell-padding) * 1.5);\n  padding-inline: var(--calcite-internal-table-cell-padding);\n  background-color: var(--calcite-internal-table-header-background);\n\n  &:not(.static-cell) {\n    @apply focus-base;\n    &:not(.static-cell):focus-within {\n      @apply focus-inset;\n    }\n  }\n}\n\nth:not(.center):not(.end).content-cell {\n  @apply align-top;\n}\n\nth.center {\n  @apply align-middle;\n}\n\nth.end.content-cell {\n  @apply align-bottom;\n}\n\nth.body-row,\nth.footer-row {\n  padding-block: var(--calcite-internal-table-cell-padding);\n  border-block-end: 0;\n}\n\nth.footer-row {\n  border-block-start: 1px solid var(--calcite-internal-table-header-border-color);\n}\n\nth.last-cell {\n  border-inline-end: 0;\n}\n\n.cell--multiple-selection {\n  @apply cursor-pointer align-middle text-color-3;\n  &:not(.end) {\n    @apply align-middle;\n  }\n}\n\n.selected-cell:not(.number-cell):not(.footer-cell) {\n  --calcite-internal-table-header-background: var(--calcite-color-foreground-current);\n}\n\n.number-cell,\n.selection-cell {\n  @apply text-color-2;\n  inline-size: 2rem;\n  min-inline-size: 2rem;\n}\n\n.selection-cell calcite-icon.active {\n  color: var(--calcite-color-brand);\n}\n.number-cell calcite-icon,\n.selection-cell calcite-icon {\n  @apply ms-auto me-auto align-middle;\n}\n\n.heading {\n  @apply text-color-1;\n}\n\n.description {\n  @apply text-color-3;\n  font-size: var(--calcite-internal-table-cell-font-size-secondary);\n}\n"],"names":["getIconScale","componentScale","async","componentOnReady","el","isStencilEl","Promise","resolve","requestAnimationFrame","CSS","iconCache","requestCache","scaleToPx","s","m","l","fetchIcon","_ref","icon","scale","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","concat","normalizeIconName","filled","iconName","substring","id","fetch","getAssetPath","then","resp","json","catch","console","error","path","Icon","proxyCustomElement","HTMLElement","connectedCallback","this","waitUntilVisible","visible","loadIconPathData","disconnectedCallback","_this$intersectionObs","intersectionObserver","disconnect","componentWillLoad","render","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","h","Host","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","d","opacity","Build","isBrowser","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","resolveMap","WeakMap","promiseMap","setUpLoadableComponent","component","set","setComponentLoaded","get","componentLoaded","componentFocusable","forceUpdate","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","messages","defaultMessages","messageOverrides","setUpMessages","fetchMessages","effectiveLocale","lang","componentName","tagName","toLowerCase","key","ok","getMessageBundle","getSupportedLocale","updateMessages","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages","undefined","TableHeader","onContainerBlur","focused","onContainerFocus","onSelectedChange","updateScreenReaderText","componentDidLoad","connectLocalized","disconnectLocalized","effectiveLocaleChange","setFocus","containerEl","focus","_this$messages","text","sharedText","selectedRowCountLocalized","selected","_this$messages2","numberCell","rowNumber","selectionMode","_this$messages3","selectionColumn","bodyRowCount","selectedRowCount","_this$messages4","_this$messages5","_this$messages6","all","keyboardDeselectAll","_this$messages7","_this$messages8","keyboardSelectAll","screenReaderText","scope","rowSpan","colSpan","parentRowType","allSelected","selectionIcon","staticCell","interactionMode","selectionCell","positionInRow","parentRowIsSelected","lastCell","parentRowAlignment","onBlur","onFocus","tabIndex","ref","heading","description"],"sourceRoot":""}